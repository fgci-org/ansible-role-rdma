---
# tasks file for ansible-role-rdma
#

- name: Make sure MLNX_OFED repo does not mess up if using EL RDMA packages
  yum_repository:
    name: "{{ mlnx_ofed_repo }}"
    state: absent
  when: rdma_type == 'el'

  # if rdma_core_packages is not defined use the ones from vars
- name: install rdma
  package:
    name: "{{ rdma_core_packages | default(role_rdma_core_packages) }}"
    state: present

- name: install extra rdma packages
  package:
    name: "{{ rdma_packages }}"
    state: present

- name: add infiniband udev rules
  template:
    src: 90-rdma.rules
    dest: /etc/udev/rules.d/90-rdma.rules
    backup: yes
    owner: root
    mode: 0644

- name: add infiniband rdma.conf file
  template:
    src: rdma.conf
    dest: /etc/security/limits.d/rdma.conf
    backup: yes
    owner: root
    mode: 0644
  when: rdma_limits|bool

## Configure Mellanox Ports for Ethernet

- name: find mellanox PCI devices
  shell: "{{ rdma_lspci_path }}|grep Mellanox|wc -l"
  register: reg_rdma_mellanox_devices
  check_mode: no
  when: rdma_configure_single_port|bool or rdma_configure_dual_ports|bool
  changed_when: False

- debug: var=reg_rdma_mellanox_devices verbosity=1
  when: rdma_configure_single_port|bool or rdma_configure_dual_ports|bool

- name: find mellanox PCI device name - only if we find only one Mellanox device
  shell: "{{ rdma_lspci_path }}|grep Mellanox|awk '{print $1}'"
  register: reg_rdma_mellanox_device
  check_mode: no
  when: rdma_configure_single_port|bool or rdma_configure_dual_ports|bool and reg_rdma_mellanox_devices.stdout == "1"
  changed_when: False

- name: configure port1
  lineinfile:
    dest: /etc/rdma/mlx4.conf
    regexp: '^{{ reg_rdma_mellanox_device.stdout }} {{ rdma_port1 }}'
    line: '{{ reg_rdma_mellanox_device.stdout }} {{ rdma_port1 }}'
    state: present
  when: 
    - rdma_configure_single_port|bool
    - rdma_configure_dual_ports == False
    - reg_rdma_mellanox_devices.stdout == "1"
    - mlnx_ofed_ver == "4"

- name: configure port1 and port 2
  lineinfile:
    dest: /etc/rdma/mlx4.conf
    regexp: '^{{ reg_rdma_mellanox_device.stdout }} {{ rdma_port1 }} {{ rdma_port2 }}'
    line: '{{ reg_rdma_mellanox_device.stdout }} {{ rdma_port1 }} {{ rdma_port2 }}'
    state: present
  when:
    - rdma_configure_dual_ports|bool
    - rdma_configure_single_port == False
    - reg_rdma_mellanox_devices.stdout == "1"
    - mlnx_ofed_ver == "4"


- name: Do not fail by tying to load driver for non-existent mlx5_fpga
  lineinfile:
    path: /etc/infiniband/openib.conf
    regexp: '^MLX5_FPGA_LOAD='
    line: 'MLX5_FPGA_LOAD=no'
    state: present
  when: rdma_type == 'mlnx_ofed' or rdma_type == 'mlnx_ofed_upstream_libs'

- name: Do not fail by trying to load driver for mlx5
  lineinfile:
    path: /etc/infiniband/openib.conf
    regexp: '^MLX5_LOAD='
    line: 'MLX5_LOAD=no'
    state: present
  when: (rdma_type == 'mlnx_ofed' or rdma_type == 'mlnx_ofed_upstream_libs') and mlnx_ofed_ver == '4'

- name: Do not load ib_srp (scsi over RDMA) module
  lineinfile:
    path: /etc/rdma/rdma.conf
    regexp: '^SRP_LOAD='
    line: 'SRP_LOAD=no'
    state: present
    create: yes

- name: Do not load ib_srpt (scsi over RDMA target) module
  lineinfile:
    path: /etc/rdma/rdma.conf
    regexp: '^SRPT_LOAD='
    line: 'SRPT_LOAD=no'
    state: present
    create: yes

- name: Do not load ib_iser (iscsi over RDMA) module
  lineinfile:
    path: /etc/rdma/rdma.conf
    regexp: '^ISER_LOAD='
    line: 'ISER_LOAD=no'
    state: present
    create: yes

- name: Do not load ib_isert (iscsi over RDMA target) module
  lineinfile:
    path: /etc/rdma/rdma.conf
    regexp: '^ISERT_LOAD='
    line: 'ISERT_LOAD=no'
    state: present
    create: yes

##

- name: Manage the rdma service
  service:
    name: "{{ rdma_service_name }}"
    state: "{{ rdma_service_state }}"
    enabled: "{{ rdma_service_enabled }}"
  when:
    - ansible_virtualization_type != "docker"
    - ansible_connection != 'chroot'
    - rdma_manage_rdma|bool

- name: Enable the RDMA service on chroots
  command: systemctl enable {{ rdma_service_name }}
  when:
    - ansible_connection == 'chroot'
    - rdma_manage_rdma|bool

- name: Make sure opensm is installed if ansible manages it
  package:
    name: opensm
    state: present
  when: rdma_manage_opensm|bool

- name: Generate the OpenSM partition configuration file
  template:
    src: partitions.conf.j2
    dest: "{{ rdma_opensm_partitions_conf_path }}"
    owner: root
    mode: 0644
  when: rdma_manage_opensm|bool
  notify: restart opensm

- name: Manage the opensm service
  service:
    name: "{{ rdma_opensm_service }}"
    state: "{{ rdma_opensm_state }}"
    enabled: "{{ rdma_opensm_enabled }}"
  when: 
    - ansible_virtualization_type != "docker"
    - ansible_connection != 'chroot'
    - rdma_manage_opensm|bool

- name: Enable the OpenSM service on chroots
  command: systemctl enable {{ rdma_opensm_service }}
  when:
    - ansible_connection == 'chroot'
    - rdma_manage_opensm|bool

# The MLNX_OFED init script won't work with bootstrap images since
# kernel modules aren't symlinks and thus the script thinks the
# modules don't belong to MLNX_OFED.  However, the script has a
# variable FORCE that can be set to force it to ignore this check.
- name: Fix /etc/init.d/openibd on chroots
  lineinfile:
    path: /etc/init.d/openibd
    regexp: '^FORCE=0$'
    line: 'FORCE=1'
  when:
    - ansible_connection == 'chroot'
    - (rdma_type == 'mlnx_ofed' or rdma_type == 'mlnx_ofed_upstream_libs')
